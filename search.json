[{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction :","title":"Générer un rapport d’analyses","text":"Cette vignette pour objectif de décrire l’utilisation de différentes fonctions permettant l’analyse et la génération de rapports à partir de données relatives aux élus municipaux. Les fonctions expliquées sont les suivantes : summary_commune() : Cette fonction génère un résumé des informations concernant une commune spécifique. Elle permet d’obtenir des statistiques sur les élus de la commune, comme le nombre d’élus, la distribution des âges et des informations sur l’élu le plus âgé. summary_departement() : Comme la fonction summary_commune(), cette fonction génère un résumé des informations relatives à un département spécifique. Elle permet de connaitre le nombre de communes dans le département, le nombre d’élus et la distribution des âges. La fonction affiche aussi les informations concernant l’élu le plus âgé et le plus jeune ainsi que des statistiques concernant la commune ayant la moyenne d’âge la plus élevée et la plus faible. generer_rapport() : Cette fonction rend possible la génération d’un rapport quarto au format PDF contenant les résultats obtenus avec les fonctions summary_commune() et summary_departement().","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"fonction-summary_commune","dir":"Articles","previous_headings":"","what":"1. Fonction summary_commune()","title":"Générer un rapport d’analyses","text":"La fonction summary_commune() prend en entrer un dataframe auquel le type commune est appliqué si ce n’est pas le cas, et fournit un résumé de la commune incluant : Le nom de la commune Le nombre d’élus La distribution des âges Des informations sur l’élu le plus âgé","code":"df_commune <- data.frame(   Code.du.département = rep(\"44\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.collectivité.à.statut.particulier = rep(0, 10),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"A\", 10),   Code.de.la.commune = rep(\"44000\", 10),   Libellé.de.la.commune = rep(\"Nantes\", 10),   Nom.de.l.élu = c(\"MR.A\", \"MR.B\", \"MR.C\", \"MR.D\",\"MR.E\",\"MR.F\",\"MR.G\",\"MR.H\",\"MR.I\",\"MR.J\"),   Prénom.de.l.élu = c(\"PrenomA\",\"PrenomB\",\"PrenomC\",\"PrenomD\",\"PrenomE\",\"PrenomF\",\"PrenomG\",\"PrenomH\",\"PrenomI\",\"PrenomJ\"),   Code.sexe = rep(\"H\", 10),   Date.de.naissance = as.Date(c(\"23/6/1977\", \"6/3/1982\", \"15/3/1983\", \"14/8/1995\", \"2/11/1970\",                                  \"26/1/1986\", \"28/7/1977\", \"9/7/1979\", \"15/11/1987\", \"3/11/1983\"), format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321, 3110, 3530, 4120, 456, 4120),   Libellé.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"),   Date.de.début.du.mandat = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                       \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"Maire\", \"1er adjoint au Maire\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\", \"\", \"\"), # Ajout d'une valeur manquante   Date.de.début.de.la.fonction = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                            \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Code.nationalité = rep(\"FR\", 10) ) summary_commune(df_commune) Nom de la commune: Nantes Nombre d'élu.e.s de la commune: 10  Ditribution des âges des élu.e.s: 29 39.5 41.5 46.5 54  L'élu.e le/la plus agé.e de la commune: - Nom : MR.E - Prénom : PrenomE - Âge : 54 ans"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"exemple-dutilisation-de-summary_commune","dir":"Articles","previous_headings":"","what":"Exemple d’utilisation de summary_commune()","title":"Générer un rapport d’analyses","text":"","code":"df_commune <- data.frame(   Code.du.département = rep(\"44\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.collectivité.à.statut.particulier = rep(0, 10),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"A\", 10),   Code.de.la.commune = rep(\"44000\", 10),   Libellé.de.la.commune = rep(\"Nantes\", 10),   Nom.de.l.élu = c(\"MR.A\", \"MR.B\", \"MR.C\", \"MR.D\",\"MR.E\",\"MR.F\",\"MR.G\",\"MR.H\",\"MR.I\",\"MR.J\"),   Prénom.de.l.élu = c(\"PrenomA\",\"PrenomB\",\"PrenomC\",\"PrenomD\",\"PrenomE\",\"PrenomF\",\"PrenomG\",\"PrenomH\",\"PrenomI\",\"PrenomJ\"),   Code.sexe = rep(\"H\", 10),   Date.de.naissance = as.Date(c(\"23/6/1977\", \"6/3/1982\", \"15/3/1983\", \"14/8/1995\", \"2/11/1970\",                                  \"26/1/1986\", \"28/7/1977\", \"9/7/1979\", \"15/11/1987\", \"3/11/1983\"), format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321, 3110, 3530, 4120, 456, 4120),   Libellé.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"),   Date.de.début.du.mandat = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                       \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"Maire\", \"1er adjoint au Maire\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\", \"\", \"\"), # Ajout d'une valeur manquante   Date.de.début.de.la.fonction = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                            \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Code.nationalité = rep(\"FR\", 10) ) summary_commune(df_commune) Nom de la commune: Nantes Nombre d'élu.e.s de la commune: 10  Ditribution des âges des élu.e.s: 29 39.5 41.5 46.5 54  L'élu.e le/la plus agé.e de la commune: - Nom : MR.E - Prénom : PrenomE - Âge : 54 ans"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"création-dun-dataframe-dexemple","dir":"Articles","previous_headings":"1. Fonction summary_commune()","what":"Création d’un dataframe d’exemple","title":"Générer un rapport d’analyses","text":"","code":"df_commune <- data.frame(   Code.du.département = rep(\"44\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.collectivité.à.statut.particulier = rep(0, 10),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"A\", 10),   Code.de.la.commune = rep(\"44000\", 10),   Libellé.de.la.commune = rep(\"Nantes\", 10),   Nom.de.l.élu = c(\"MR.A\", \"MR.B\", \"MR.C\", \"MR.D\",\"MR.E\",\"MR.F\",\"MR.G\",\"MR.H\",\"MR.I\",\"MR.J\"),   Prénom.de.l.élu = c(\"PrenomA\",\"PrenomB\",\"PrenomC\",\"PrenomD\",\"PrenomE\",\"PrenomF\",\"PrenomG\",\"PrenomH\",\"PrenomI\",\"PrenomJ\"),   Code.sexe = rep(\"H\", 10),   Date.de.naissance = as.Date(c(\"23/6/1977\", \"6/3/1982\", \"15/3/1983\", \"14/8/1995\", \"2/11/1970\",                                  \"26/1/1986\", \"28/7/1977\", \"9/7/1979\", \"15/11/1987\", \"3/11/1983\"), format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321, 3110, 3530, 4120, 456, 4120),   Libellé.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"),   Date.de.début.du.mandat = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                       \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"Maire\", \"1er adjoint au Maire\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\", \"\", \"\"), # Ajout d'une valeur manquante   Date.de.début.de.la.fonction = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                            \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Code.nationalité = rep(\"FR\", 10) )"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"résumé-de-la-commune","dir":"Articles","previous_headings":"1. Fonction summary_commune()","what":"Résumé de la commune","title":"Générer un rapport d’analyses","text":"","code":"summary_commune(df_commune) Nom de la commune: Nantes Nombre d'élu.e.s de la commune: 10  Ditribution des âges des élu.e.s: 29 39.5 41.5 46.5 54  L'élu.e le/la plus agé.e de la commune: - Nom : MR.E - Prénom : PrenomE - Âge : 54 ans"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"fonction-summary_departement","dir":"Articles","previous_headings":"","what":"2. Fonction summary_departement()","title":"Générer un rapport d’analyses","text":"La fonction summary_departement() prend en entrer un dataframe auquel le type departement est appliqué si ce n’est pas le cas, et fournit un résumé du département incluant : Le nombre de commune dans le département Le nombre d’élus La distribution des âges Des informations sur l’élu le plus âgé Des informations sur l’élu le plus jeune Des statistiques sur la commune ayant la moyenne d’âge la plus élevée Des statistiques sur la commune ayant la moyenne d’âge la plus faible","code":"df_departement <- data.frame(   Code.du.département = rep(\"44\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.collectivité.à.statut.particulier = rep(0, 10),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"A\", 10),   Code.de.la.commune = c(rep(44000, 3), rep(44100, 2), rep(44200, 3), rep(44300,2)),   Libellé.de.la.commune = c(rep(\"Commune1\", 3), rep(\"Commune2\", 2), rep(\"Commune3\",3),rep(\"Commune4\",2)),   Nom.de.l.élu = c(\"MR.A\", \"MR.B\", \"MR.C\", \"MR.D\",\"MR.E\",\"MR.F\",\"MR.G\",\"MR.H\",\"MR.I\",\"MR.J\"),   Prénom.de.l.élu = c(\"PrenomA\",\"PrenomB\",\"PrenomC\",\"PrenomD\",\"PrenomE\",\"PrenomF\",\"PrenomG\",\"PrenomH\",\"PrenomI\",\"PrenomJ\"),   Code.sexe = rep(\"H\", 10),   Date.de.naissance = as.Date(c(\"23/6/1977\", \"6/3/1982\", \"15/3/1983\", \"14/8/1995\", \"2/11/1970\",                                  \"26/1/1986\", \"28/7/1977\", \"9/7/1979\", \"15/11/1987\", \"3/11/1983\"), format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321, 3110, 3530, 4120, 456, 4120),   Libellé.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"),   Date.de.début.du.mandat = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                       \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"Maire\", \"1er adjoint au Maire\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\", \"\", \"\"), # Ajout d'une valeur manquante   Date.de.début.de.la.fonction = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                            \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Code.nationalité = rep(\"FR\", 10) ) summary_departement(df_departement) Nom du département:  Loire-Atlantique Nombre de communes:  4 Nombre d'élus dans le département:  10  Distribution des âges des élu.e.s :   0%  25%  50%  75% 100% 29.0 39.5 41.5 46.5 54.0  L'élu.e le/la plus agé.e du département: - Nom : MR.E - Prénom : PrenomE - Âge : 54 ans  L'élu.e le/la plus jeune du département: - Nom : MR.D - Prénom : PrenomD - Âge : 29 ans  Commune avec la moyenne d'âge la plus faible: Commune4 Distribution des âges dans la commune: - Moyenne: 39 ans - Minimum: 37 ans - 1er quartile: 38 ans - Médiane: 39 ans - 3ème quartile: 40 ans - Maximum: 41 ans  Commune avec la moyenne d'âge la plus élevée: Commune3 Distribution des âges dans la commune: - Moyenne: 43.7 ans - Minimum: 39 ans - 1er quartile: 42 ans - Médiane: 45 ans - 3ème quartile: 46 ans - Maximum: 47 ans"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"exemple-dutilisation-de-summary_departement","dir":"Articles","previous_headings":"","what":"Exemple d’utilisation de summary_departement()","title":"Générer un rapport d’analyses","text":"","code":"df_departement <- data.frame(   Code.du.département = rep(\"44\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.collectivité.à.statut.particulier = rep(0, 10),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"A\", 10),   Code.de.la.commune = c(rep(44000, 3), rep(44100, 2), rep(44200, 3), rep(44300,2)),   Libellé.de.la.commune = c(rep(\"Commune1\", 3), rep(\"Commune2\", 2), rep(\"Commune3\",3),rep(\"Commune4\",2)),   Nom.de.l.élu = c(\"MR.A\", \"MR.B\", \"MR.C\", \"MR.D\",\"MR.E\",\"MR.F\",\"MR.G\",\"MR.H\",\"MR.I\",\"MR.J\"),   Prénom.de.l.élu = c(\"PrenomA\",\"PrenomB\",\"PrenomC\",\"PrenomD\",\"PrenomE\",\"PrenomF\",\"PrenomG\",\"PrenomH\",\"PrenomI\",\"PrenomJ\"),   Code.sexe = rep(\"H\", 10),   Date.de.naissance = as.Date(c(\"23/6/1977\", \"6/3/1982\", \"15/3/1983\", \"14/8/1995\", \"2/11/1970\",                                  \"26/1/1986\", \"28/7/1977\", \"9/7/1979\", \"15/11/1987\", \"3/11/1983\"), format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321, 3110, 3530, 4120, 456, 4120),   Libellé.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"),   Date.de.début.du.mandat = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                       \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"Maire\", \"1er adjoint au Maire\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\", \"\", \"\"), # Ajout d'une valeur manquante   Date.de.début.de.la.fonction = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                            \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Code.nationalité = rep(\"FR\", 10) ) summary_departement(df_departement) Nom du département:  Loire-Atlantique Nombre de communes:  4 Nombre d'élus dans le département:  10  Distribution des âges des élu.e.s :   0%  25%  50%  75% 100% 29.0 39.5 41.5 46.5 54.0  L'élu.e le/la plus agé.e du département: - Nom : MR.E - Prénom : PrenomE - Âge : 54 ans  L'élu.e le/la plus jeune du département: - Nom : MR.D - Prénom : PrenomD - Âge : 29 ans  Commune avec la moyenne d'âge la plus faible: Commune4 Distribution des âges dans la commune: - Moyenne: 39 ans - Minimum: 37 ans - 1er quartile: 38 ans - Médiane: 39 ans - 3ème quartile: 40 ans - Maximum: 41 ans  Commune avec la moyenne d'âge la plus élevée: Commune3 Distribution des âges dans la commune: - Moyenne: 43.7 ans - Minimum: 39 ans - 1er quartile: 42 ans - Médiane: 45 ans - 3ème quartile: 46 ans - Maximum: 47 ans"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"création-dun-dataframe-dexemple-1","dir":"Articles","previous_headings":"2. Fonction summary_departement()","what":"Création d’un dataframe d’exemple","title":"Générer un rapport d’analyses","text":"","code":"df_departement <- data.frame(   Code.du.département = rep(\"44\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.collectivité.à.statut.particulier = rep(0, 10),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"A\", 10),   Code.de.la.commune = c(rep(44000, 3), rep(44100, 2), rep(44200, 3), rep(44300,2)),   Libellé.de.la.commune = c(rep(\"Commune1\", 3), rep(\"Commune2\", 2), rep(\"Commune3\",3),rep(\"Commune4\",2)),   Nom.de.l.élu = c(\"MR.A\", \"MR.B\", \"MR.C\", \"MR.D\",\"MR.E\",\"MR.F\",\"MR.G\",\"MR.H\",\"MR.I\",\"MR.J\"),   Prénom.de.l.élu = c(\"PrenomA\",\"PrenomB\",\"PrenomC\",\"PrenomD\",\"PrenomE\",\"PrenomF\",\"PrenomG\",\"PrenomH\",\"PrenomI\",\"PrenomJ\"),   Code.sexe = rep(\"H\", 10),   Date.de.naissance = as.Date(c(\"23/6/1977\", \"6/3/1982\", \"15/3/1983\", \"14/8/1995\", \"2/11/1970\",                                  \"26/1/1986\", \"28/7/1977\", \"9/7/1979\", \"15/11/1987\", \"3/11/1983\"), format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321, 3110, 3530, 4120, 456, 4120),   Libellé.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"),   Date.de.début.du.mandat = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                       \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"Maire\", \"1er adjoint au Maire\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\", \"\", \"\"), # Ajout d'une valeur manquante   Date.de.début.de.la.fonction = as.Date(c(\"2/8/2020\", \"17/11/2021\", \"13/8/2020\", \"27/5/2022\", \"24/1/2022\",                                            \"4/3/2022\", \"9/8/2022\", \"20/6/2022\", \"29/6/2022\", \"10/6/2022\"), format = \"%d/%m/%Y\"),   Code.nationalité = rep(\"FR\", 10) )"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"résumé-du-département","dir":"Articles","previous_headings":"2. Fonction summary_departement()","what":"Résumé du département","title":"Générer un rapport d’analyses","text":"","code":"summary_departement(df_departement) Nom du département:  Loire-Atlantique Nombre de communes:  4 Nombre d'élus dans le département:  10  Distribution des âges des élu.e.s :   0%  25%  50%  75% 100% 29.0 39.5 41.5 46.5 54.0  L'élu.e le/la plus agé.e du département: - Nom : MR.E - Prénom : PrenomE - Âge : 54 ans  L'élu.e le/la plus jeune du département: - Nom : MR.D - Prénom : PrenomD - Âge : 29 ans  Commune avec la moyenne d'âge la plus faible: Commune4 Distribution des âges dans la commune: - Moyenne: 39 ans - Minimum: 37 ans - 1er quartile: 38 ans - Médiane: 39 ans - 3ème quartile: 40 ans - Maximum: 41 ans  Commune avec la moyenne d'âge la plus élevée: Commune3 Distribution des âges dans la commune: - Moyenne: 43.7 ans - Minimum: 39 ans - 1er quartile: 42 ans - Médiane: 45 ans - 3ème quartile: 46 ans - Maximum: 47 ans"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"fonction-generer_rapport","dir":"Articles","previous_headings":"","what":"2. Fonction generer_rapport()","title":"Générer un rapport d’analyses","text":"La fonction generer_rapport() permet de générer un fichier au format PDF contenant les résultats obtenus avec les fonctions summary_commune() et summary_departement(). Création d’un rapport pour la ville de Nantes (code = 44109) et du département de la Loire-Atlantique (code = 44)","code":"generer_rapport(code_commune = \"44109\", code_departement = \"44\", output = \"Rapport_Nantes.pdf\")"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/articles/generer-rapport-analyses.html","id":"exemple-dutilisation-de-generer_rapport","dir":"Articles","previous_headings":"","what":"Exemple d’utilisation de generer_rapport","title":"Générer un rapport d’analyses","text":"Création d’un rapport pour la ville de Nantes (code = 44109) et du département de la Loire-Atlantique (code = 44)","code":"generer_rapport(code_commune = \"44109\", code_departement = \"44\", output = \"Rapport_Nantes.pdf\")"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adrien ALLAIN. Author, maintainer.           IAE Nantes","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"ALLAIN (2025). firstlibAdrienALLAIN: Un package R qui fournit des outils d'analyses des données sur des élus et communes.. R package version 0.1.0, https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/.","code":"@Manual{,   title = {firstlibAdrienALLAIN: Un package R qui fournit des outils d'analyses des données sur des élus et communes.},   author = {Adrien ALLAIN},   year = {2025},   note = {R package version 0.1.0},   url = {https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/}, }"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/index.html","id":"firstlibadrienallain","dir":"","previous_headings":"","what":"Un package R qui fournit des outils d'analyses des données sur des élus et communes.","title":"Un package R qui fournit des outils d'analyses des données sur des élus et communes.","text":"goal firstlibAdrienALLAIN …","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Un package R qui fournit des outils d'analyses des données sur des élus et communes.","text":"can install development version firstlibAdrienALLAIN GitHub :","code":"# install.packages(\"pak\") pak::pak(\"Adrien-Allain/firstlib-Adrien_ALLAIN\")"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Un package R qui fournit des outils d'analyses des données sur des élus et communes.","text":"basic example shows solve common problem:","code":"library(firstlibAdrienALLAIN) ## basic example code"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/calcul_distribution_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Calcul distribution âge — calcul_distribution_age","title":"Calcul distribution âge — calcul_distribution_age","text":"Calcule la distribution des âges dans un df","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/calcul_distribution_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calcul distribution âge — calcul_distribution_age","text":"","code":"calcul_distribution_age(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/calcul_distribution_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calcul distribution âge — calcul_distribution_age","text":"df Un dataframe conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/calcul_distribution_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calcul distribution âge — calcul_distribution_age","text":"Un vecteur numérique contenant les quantiles (0","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/calcul_distribution_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calcul distribution âge — calcul_distribution_age","text":"La fonction valide le schéma du dataframe, convertit les dates de naissance en format date, calcule l'âge des individus et retourne les quantiles de la distribution des âges. Avertissement si des dates de naissance invalides sont détectées. Cette fonction utilise le package `stats` pour calculer les quantiles","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/calcul_distribution_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calcul distribution âge — calcul_distribution_age","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"01-01-1950\", \"15-06-1970\", \"10-09-1985\", \"pas une date\"),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) calcul_distribution_age(df_exemple) #>   0%  25%  50%  75% 100%  #>   NA   NA   NA   NA   NA"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_adjoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"Compte le nombre d'adjoints au maire dans un df","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_adjoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"","code":"compter_nombre_d_adjoints(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_adjoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"df Un df conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_adjoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"Un entier représentant le nombre d'adjoints","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_adjoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"La fonction compte le nombre de lignes du df où la colonne \"Libellé.de.la.fonction\" contient le mot \"adjoint\" Cette fonction utilise le package `dplyr` pour manipuler le dataframe.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_adjoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"","code":"df <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"01-01-1950\", \"15-06-1970\", \"10-09-1985\", \"not a date\"),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = c(\"Maire\", \"3ème adjoint au Maire\", \"2ème adjoint au Maire\", \"Adjoint\"),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) compter_nombre_d_adjoints(df) # Retourne 3 #> Error in select(df, Libellé.de.la.fonction): could not find function \"select\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_elus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter nombre d elus — compter_nombre_d_elus","title":"Compter nombre d elus — compter_nombre_d_elus","text":"Compte le nombre d'élus dans un df","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_elus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter nombre d elus — compter_nombre_d_elus","text":"","code":"compter_nombre_d_elus(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_elus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter nombre d elus — compter_nombre_d_elus","text":"df Un df conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_elus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter nombre d elus — compter_nombre_d_elus","text":"Un entier représentant le nombre d'adjoints","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_elus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compter nombre d elus — compter_nombre_d_elus","text":"Cette fonction utilise le package `dplyr` pour manipuler le dataframe.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/compter_nombre_d_elus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compter nombre d elus — compter_nombre_d_elus","text":"","code":"df <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"01-01-1950\", \"15-06-1970\", \"10-09-1985\", \"not a date\"),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = c(\"Maire\", \"3ème adjoint au Maire\", \"2ème adjoint au Maire\", \"Adjoint\"),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) compter_nombre_d_elus(df) #> Error in distinct(select(df, Nom.de.l.élu, Prénom.de.l.élu, Date.de.naissance)): could not find function \"distinct\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Creer commune — creer_commune","title":"Creer commune — creer_commune","text":"Crée un objet de classe \"commune\"","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creer commune — creer_commune","text":"","code":"creer_commune(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creer commune — creer_commune","text":"df Un dataframe","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creer commune — creer_commune","text":"Le même dataframe avec la classe \"commune\" ajoutée","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_commune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creer commune — creer_commune","text":"Cette fonction prend un dataframe en entrée et lui ajoute la classe \"commune\". La classe originale du dataframe est conservée, et \"commune\" est simplement ajoutée comme classe supplémentaire.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creer commune — creer_commune","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) creer_commune(df_exemple) #> La classe de l'objet a été modifiée en 'commune'. #>   Code.du.département Libellé.du.département #> 1                                            #> 2                                            #> 3                                            #> 4                                            #>   Code.de.la.collectivité.à.statut.particulier #> 1                                              #> 2                                              #> 3                                              #> 4                                              #>   Libellé.de.la.collectivité.à.statut.particulier Code.de.la.commune #> 1                                                                    #> 2                                                                    #> 3                                                                    #> 4                                                                    #>   Libellé.de.la.commune Nom.de.l.élu Prénom.de.l.élu Code.sexe #> 1                                                              #> 2                                                              #> 3                                                              #> 4                                                              #>   Date.de.naissance Code.de.la.catégorie.socio.professionnelle #> 1                                                              #> 2                 4                                            #> 3                                                              #> 4                 4                                            #>   Libellé.de.la.catégorie.socio.professionnelle Date.de.début.du.mandat #> 1                                                                       #> 2                                                                       #> 3                                                                       #> 4                                                                       #>   Libellé.de.la.fonction Date.de.début.de.la.fonction Code.nationalité #> 1                                                                      #> 2                                                                      #> 3                                                                      #> 4"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Creer departement — creer_departement","title":"Creer departement — creer_departement","text":"Crée un objet de classe \"departement\"","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creer departement — creer_departement","text":"","code":"creer_departement(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creer departement — creer_departement","text":"df Un dataframe","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creer departement — creer_departement","text":"Le même dataframe avec la classe \"departement\" ajoutée","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_departement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creer departement — creer_departement","text":"Cette fonction prend un dataframe en entrée et lui ajoute la classe \"departement\". La classe originale du dataframe est conservée, et \"departement\" est simplement ajoutée comme classe supplémentaire.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/creer_departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creer departement — creer_departement","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) creer_departement(df_exemple) #> La classe de l'objet a été modifiée en 'departement'. #>   Code.du.département Libellé.du.département #> 1                                            #> 2                                            #> 3                                            #> 4                                            #>   Code.de.la.collectivité.à.statut.particulier #> 1                                              #> 2                                              #> 3                                              #> 4                                              #>   Libellé.de.la.collectivité.à.statut.particulier Code.de.la.commune #> 1                                                                    #> 2                                                                    #> 3                                                                    #> 4                                                                    #>   Libellé.de.la.commune Nom.de.l.élu Prénom.de.l.élu Code.sexe #> 1                                                              #> 2                                                              #> 3                                                              #> 4                                                              #>   Date.de.naissance Code.de.la.catégorie.socio.professionnelle #> 1                                                              #> 2                 4                                            #> 3                                                              #> 4                 4                                            #>   Libellé.de.la.catégorie.socio.professionnelle Date.de.début.du.mandat #> 1                                                                       #> 2                                                                       #> 3                                                                       #> 4                                                                       #>   Libellé.de.la.fonction Date.de.début.de.la.fonction Code.nationalité #> 1                                                                      #> 2                                                                      #> 3                                                                      #> 4"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/generer_rapport.html","id":null,"dir":"Reference","previous_headings":"","what":"Génère un rapport Quarto PDF pour une commune et un département — generer_rapport","title":"Génère un rapport Quarto PDF pour une commune et un département — generer_rapport","text":"Cette fonction génère un rapport PDF se basant sur un modèle quarto stocké dans le dossier 'inst/' du package. Elle utilise les codes de la commune et du département donnée, et sauvegarde le rapport en .pdf à la racine.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/generer_rapport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Génère un rapport Quarto PDF pour une commune et un département — generer_rapport","text":"","code":"generer_rapport(code_commune, code_departement, output)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/generer_rapport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Génère un rapport Quarto PDF pour une commune et un département — generer_rapport","text":"output Le nom de sortie du fichier pdf généré, sous forme de chaîne de caractères. commune Un code de commune sous forme de chaîne de caractères (ex : \"44109\"). departement Un code de département sous forme de chaîne de caractères (ex : \"44\").","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/generer_rapport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Génère un rapport Quarto PDF pour une commune et un département — generer_rapport","text":"Aucun retour explicite. Un fichier PDF","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/generer_rapport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Génère un rapport Quarto PDF pour une commune et un département — generer_rapport","text":"","code":"if (FALSE) { # \\dontrun{ generer_rapport(   commune = \"44109\",   departement = \"44\",   output = \"rapport_nantes.pdf\" ) } # }"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_code_professions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot code professions — plot_code_professions","title":"Plot code professions — plot_code_professions","text":"Visualise le nombre d'élus par catégorie socio-professionnelle (CSP)","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_code_professions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot code professions — plot_code_professions","text":"","code":"plot_code_professions(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_code_professions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot code professions — plot_code_professions","text":"df Un dataframe conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_code_professions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot code professions — plot_code_professions","text":"Un barplot du nombre d'élus par CSP.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_code_professions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot code professions — plot_code_professions","text":"Cette fonction prend un dataframe contenant des informations sur les élus et génère un graphique à barres représentant le nombre d'élus pour chaque catégorie socio-professionnelle, trié par nombre décroissant. Cette fonction utilise le package `dplyr` pour manipuler le dataframe et le package `ggplot2` pour la visualisation des données.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_code_professions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot code professions — plot_code_professions","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\", \"C\", \"A\", \"B\", \"A\"),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) #> Error in data.frame(Code.du.département = rep(\"\", 4), Libellé.du.département = rep(\"\",     4), Code.de.la.collectivité.à.statut.particulier = rep(\"\",     4), Libellé.de.la.collectivité.à.statut.particulier = rep(\"\",     4), Code.de.la.commune = rep(\"\", 4), Libellé.de.la.commune = rep(\"\",     4), Nom.de.l.élu = rep(\"\", 4), Prénom.de.l.élu = rep(\"\",     4), Code.sexe = rep(\"\", 4), Date.de.naissance = c(\"\", 4),     Code.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",         \"C\", \"A\", \"B\", \"A\"), Libellé.de.la.catégorie.socio.professionnelle = rep(\"\",         4), Date.de.début.du.mandat = rep(\"\", 4), Libellé.de.la.fonction = rep(\"\",         4), Date.de.début.de.la.fonction = rep(\"\", 4), Code.nationalité = rep(\"\",         4)): arguments imply differing number of rows: 4, 2, 6 plot_code_professions(df_exemple) #> Error in arrange(summarise(group_by(df, Code.de.la.catégorie.socio.professionnelle),     n = n()), desc(n)): could not find function \"arrange\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot commune — plot_commune","title":"Plot commune — plot_commune","text":"Cette fonction génère un graphique (barplot) pour chaque code professionnel et le nombre d’élus ayant ce code.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot commune — plot_commune","text":"","code":"plot_commune(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot commune — plot_commune","text":"df Un dataframe d'une unique commune et conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot commune — plot_commune","text":"Un diagramme en barres des catégories socio-professionnelles pour la commune donnée.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_commune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot commune — plot_commune","text":"Cette fonction utilise le package `dplyr` pour manipuler le dataframe et le package `ggplot2` pour la visualisation des données.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot commune — plot_commune","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = c(\"1\",\"1\",\"1\",\"1\"),   Libellé.de.la.commune = c(\"A\",\"A\",\"A\",\"A\"),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) plot_commune(df_exemple) #> Error in arrange(summarise(group_by(df, Code.de.la.catégorie.socio.professionnelle),     n = n()), desc(n)): could not find function \"arrange\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot departement — plot_departement","title":"Plot departement — plot_departement","text":"Cette fonction génère un graphique (barplot) pour chaque code professionnel et le nombre d’élus ayant ce code.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot departement — plot_departement","text":"","code":"plot_departement(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot departement — plot_departement","text":"df Un dataframe d'un unique département et conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot departement — plot_departement","text":"Un diagramme en barres des catégories socio-professionnelles pour la commune donnée.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_departement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot departement — plot_departement","text":"Cette fonction utilise le package `dplyr` pour manipuler le dataframe et le package `ggplot2` pour la visualisation des données.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/plot_departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot departement — plot_departement","text":"","code":"df_exemple <- data.frame(   Code.du.département = c(\"1\",\"1\",\"1\",\"1\"),   Libellé.du.département = c(\"A\",\"A\",\"A\",\"A\"),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) plot_departement(df_exemple) #> Error in slice_max(arrange(summarise(group_by(df, Code.de.la.catégorie.socio.professionnelle),     n = n()), desc(n)), n, n = 10): could not find function \"slice_max\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"summary commune — summary_commune","title":"summary commune — summary_commune","text":"Cette fonction génère un résumé des informations relatives à une commune à partir d'un dataframe contenant des informations sur les élus. Elle affiche le nom de la commune, le nombre d'élus, la distribution des âges des élus et les détails de l'élu le plus âgé.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary commune — summary_commune","text":"","code":"summary_commune(x)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary commune — summary_commune","text":"x Un dataframe conforme au schéma. La classe de l'objet df sera modifié en \"commune\" si nécessaire.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary commune — summary_commune","text":"La fonction affiche directement un résumé dans la console (utilisation de `cat`)","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary commune — summary_commune","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = c(\"1\",\"1\",\"1\",\"1\"),   Libellé.de.la.commune = c(\"A\",\"A\",\"A\",\"A\"),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\", \"C\", \"A\", \"B\", \"A\"),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) #> Error in data.frame(Code.du.département = rep(\"\", 4), Libellé.du.département = rep(\"\",     4), Code.de.la.collectivité.à.statut.particulier = rep(\"\",     4), Libellé.de.la.collectivité.à.statut.particulier = rep(\"\",     4), Code.de.la.commune = c(\"1\", \"1\", \"1\", \"1\"), Libellé.de.la.commune = c(\"A\",     \"A\", \"A\", \"A\"), Nom.de.l.élu = rep(\"\", 4), Prénom.de.l.élu = rep(\"\",     4), Code.sexe = rep(\"\", 4), Date.de.naissance = c(\"\", 4),     Code.de.la.catégorie.socio.professionnelle = c(\"A\", \"B\",         \"C\", \"A\", \"B\", \"A\"), Libellé.de.la.catégorie.socio.professionnelle = rep(\"\",         4), Date.de.début.du.mandat = rep(\"\", 4), Libellé.de.la.fonction = rep(\"\",         4), Date.de.début.de.la.fonction = rep(\"\", 4), Code.nationalité = rep(\"\",         4)): arguments imply differing number of rows: 4, 2, 6 summary_commune(df_exemple) #> Error: object 'df_exemple' not found"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"summary departement — summary_departement","title":"summary departement — summary_departement","text":"Cette fonction génère un résumé des informations relatives à un département à partir d'un dataframe contenant des informations sur les élus. Elle affiche le nom du département, le nombre de communes, d'élus et la distribution d'âge des élus dans celui ci. La fonction affiche aussi les informations de l'élu le plus âgée et le plus jeune du département ainsi que les statistiques de la commune avec la moyenne d'âge la plus faible et la plus élevée.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary departement — summary_departement","text":"","code":"summary_departement(x)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary departement — summary_departement","text":"x Un dataframe conforme au schéma. La classe de l'objet df sera modifié en \"departement\" si nécessaire.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary departement — summary_departement","text":"La fonction affiche directement un résumé dans la console (utilisation de `cat`)","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_departement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"summary departement — summary_departement","text":"Cette fonction utilise le package `dplyr` pour manipuler le dataframe.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/summary_departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary departement — summary_departement","text":"","code":"df_exemple <- data.frame(   Code.du.département = c(\"1\",\"1\",\"1\",\"1\"),   Libellé.du.département = c(\"A\",\"A\",\"A\",\"A\"),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = rep(\"\", 4),   Prénom.de.l.élu = rep(\"\", 4),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"\", 4),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) summary.departement(df_exemple) #> Error in summary.departement(df_exemple): could not find function \"summary.departement\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/trouver_l_elu_le_plus_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","title":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","text":"Trouve l'élu le plus âgé dans un df","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/trouver_l_elu_le_plus_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","text":"","code":"trouver_l_elu_le_plus_age(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/trouver_l_elu_le_plus_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","text":"df Un dataframe conforme au schéma.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/trouver_l_elu_le_plus_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","text":"Un dataframe contenant le nom, prénom, date de naissance et âge de l'élu le plus âgé.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/trouver_l_elu_le_plus_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","text":"Cette fonction identifie l'élu le plus âgé dans un df conforme au schéma et calcule son âge en années. Cette fonction utilise le package `dplyr` pour manipuler le dataframe.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/trouver_l_elu_le_plus_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trouver l elu le plus age — trouver_l_elu_le_plus_age","text":"","code":"df_exemple <- data.frame(   Code.du.département = rep(\"\", 4),   Libellé.du.département = rep(\"\", 4),   Code.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Libellé.de.la.collectivité.à.statut.particulier = rep(\"\", 4),   Code.de.la.commune = rep(\"\", 4),   Libellé.de.la.commune = rep(\"\", 4),   Nom.de.l.élu = c(\"Dupont\", \"Martin\"),   Prénom.de.l.élu = c(\"Jean\", \"Sophie\"),   Code.sexe = rep(\"\", 4),   Date.de.naissance = c(\"01-01-1950\", \"15-06-1970\"),   Code.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Libellé.de.la.catégorie.socio.professionnelle = rep(\"\", 4),   Date.de.début.du.mandat = rep(\"\", 4),   Libellé.de.la.fonction = rep(\"\", 4),   Date.de.début.de.la.fonction = rep(\"\", 4),   Code.nationalité = rep(\"\", 4) ) trouver_l_elu_le_plus_age(df_exemple) #> Error in select(mutate(slice(mutate(df, Date.de.naissance = as.Date(Date.de.naissance,     format = \"%d/%m/%Y\")), which.min(Date.de.naissance)), Âge = as.integer(difftime(Sys.Date(),     Date.de.naissance, units = \"days\")/365.25)), Nom.de.l.élu,     Prénom.de.l.élu, Date.de.naissance, Âge): could not find function \"select\""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate schema — validate_schema","title":"Validate schema — validate_schema","text":"Vérifie la conformité du schéma d'un df","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate schema — validate_schema","text":"","code":"validate_schema(df)"},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate schema — validate_schema","text":"df Un dataframe à valider","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate schema — validate_schema","text":"Aucun retour explicite. Erreur si le schéma ne correpond pas.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/validate_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate schema — validate_schema","text":"La fonction valide si un df possède exactement les colonnes attendues. Si le schéma ne correspond pas, une erreur est levée.","code":""},{"path":"https://adrien-allain.github.io/firstlib-Adrien_ALLAIN/reference/validate_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate schema — validate_schema","text":"","code":"df_bon <- data.frame(   Code.du.département = double(),   Libellé.du.département = character(),   Code.de.la.collectivité.à.statut.particulier = double(),   Libellé.de.la.collectivité.à.statut.particulier = character(),   Code.de.la.commune = double(),   Libellé.de.la.commune = character(),   Nom.de.l.élu = character(),   Prénom.de.l.élu = character(),   Code.sexe = character(),   Date.de.naissance = character(),   Code.de.la.catégorie.socio.professionnelle = double(),   Libellé.de.la.catégorie.socio.professionnelle = character(),   Date.de.début.du.mandat = character(),   Libellé.de.la.fonction = character(),   Date.de.début.de.la.fonction = character(),   Code.nationalité = character() )  validate_schema(df_bon) #Pas d'erreur  df_pas_bon <- data.frame( département = double(), csp = character(), A = 1:5, B = 10:12 ) #> Error in data.frame(département = double(), csp = character(), A = 1:5,     B = 10:12): arguments imply differing number of rows: 0, 5, 3  valide_schema(df_pas_bon) #Erreur : Le schéma des colonnes du dataframe ne correspond pas au format attendu. #> Error in valide_schema(df_pas_bon): could not find function \"valide_schema\""}]
